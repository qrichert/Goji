/*
 * Configuration file for \Goji\Core\Router
 *
 * Reserved page names are:
 * - http-error-* (* = HTTP error code)
 */

{
	"home": {
		// If you have multiple languages, use 'routes' with an 's'
		routes: {
			// Keyword 'all' means the page is is not tied to a specific language
			// If you don't need translation, use 'route' instead (see "some-other-page")
			// Here it just means that '/' (no page specified) is tied to the home page
			// and also that it doesn't force any language. If French is selected, and we load
			// /home, English will replace French as the new language. Whereas with 'all', it won't.
			all: "/",

			// 'en_US' and 'en_GB' are two separate pages (but are both in English).
			// Note that you can't have two different pages with the same variant
			// (like if we had en_GB -> /home). In that case, the first occurrence
			// would always be selected (here en_US). If you don't want to support
			// variants, use the syntax that is used for French below.
			en_US: "/home", // Ame
			en_GB: "/welcome", // BrE

			// 'fr_FR' means French, without any particular variant (usually that's what you want)
			// Here there are two paths pointing to the same page for french (first one will be used as default)
			fr: ["/accueil", "/bienvenue"],
		},
		// 'controller' is the controller to which the page is tied to.
		// In this example, the "home" controller is \App\Controller\HomeController()
		// in /src/Controller/HomeController.class.php
		// The class is imported and called automatically, this is why you only
		// need to enter the class name. But it's also why you have to respect the
		// naming convention and make it implement \Goji\Blueprints\ControllerAbstract().
		controller: "HomeController"
	},
	"contact": {
		routes: {
			all: "/contact"
		},
		controller: "ContactController"
	},
	"xhr-contact": {
		route: "/xhr-contact",
		controller: "XhrContactController"
	},
	"login": {
		routes: {
			all: "/login"
			// If you wanted, you could have:
			//   - en: "/login",
			//   - fr: "/connexion"
			// Which would mean "use '/login' for all English pages
			// ('en_*' locales), and '/connexion' for French"
		},
		controller: "HR\\LoginController"
	},
	"sign-up": {
		routes: {
			en: "/sign-up",
			fr: "/inscription"
		},
		controller: "HR\\SignUpController"
	},
	"xhr-sign-up": {
		route: "/xhr-sign-up",
		controller: "HR\\XhrSignUpController"
	},
	"xhr-login": {
		route: "/xhr-login",
		controller: "HR\\XhrLoginController"
	},
	"logout": {
		route: "/logout",
		controller: "HR\\LogoutController"
	},
	"xhr-reset-password": {
		route: "/xhr-reset-password",
		controller: "HR\\XhrResetPasswordController"
	},
	"privacy-and-terms": {
		routes: {
			en: "/privacy-and-terms",
			fr: "/mentions-legales"
		},
		controller: "PrivacyAndTermsController"
	},
	// <FUNNEL>
	"landing-page": {
		route: "/landing-page",
		controller: "LandingPageController"
	},
	// <BLOG>
	"blog": {
		route: "/blog",
		controller: "BlogController"
	},
	"blog-post": {
		// Note that '/blog/' route is different from '/blog' route without trailing slash
		// In the default BlogPostController '/blog/' (without permalink) is redirected to '/blog'
		route: "/blog/(.+)?",
		controller: "BlogPostController"
	},
	"admin-blog-post": {
		route: "/admin/blog-post",
		controller: "Admin\\AdminBlogPostController"
	},
	"xhr-admin-blog-post": {
		route: "/admin/xhr-blog-post",
		controller: "Admin\\XhrAdminBlogPostController"
	},
	// <ADMIN>
	"admin": {
		route: "/admin",
		controller: "Admin\\AdminController"
	},
	"xhr-admin-in-page-content-edit": {
		route: "/admin/xhr-in-page-content-edit",
		controller: "Admin\\XhrAdminInPageContentEditController"
	},
	"xhr-admin-clear-cache": {
		route: "/admin/xhr-clear-cache",
		controller: "Admin\\XhrAdminClearCache"
	},
	// <DEMO>
	// This is the page ID.
	// It can be used to get a specific URL with Router::getLinkForPage( id , locale )
	// It is also put as <body id=""> in default template, so make sure it's HTML#id compliant
	"other-page": {
		// This works, but it's equivalent to the shorter syntax of "some-other-page-again"
		routes: {
			all: "/other-page"
		},
		controller: "OtherPageController"
	},
	"some-other-page": {
		// If you don't have multiple languages, use 'route' without an 's', and attach the route directly.
		// In can be a single string, or an array of strings like here
		route: [
			"/some-other-page",
			"/some-other-page-([0-9]+)(?:-([0-9]+))?"
		],
		controller: "SomeOtherPageController"
	},
	"some-other-page-again": {
		// Never forget the leading slash '/'
		// (although there's safeguard function that adds it automatically)
		// During routing the expression will always be matched within ^ expr $
		route: "/some-other-page-again",
		controller: "SomeOtherPageAgainController"
	},
	/*
		"xhr-get-last-posts": {
			route: "/xhr-get-last-posts-([0-9]+)(?:-([0-9]+))?"
			controller: "XhrGetLastPostsController"
		}
	*/
}
