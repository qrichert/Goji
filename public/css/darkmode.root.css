@charset "utf-8";

:root {
	/*
	 * Declares support for color schemes.
	 * Safari only, let's the system change default colors to dark mode.
	 */
	/*color-scheme: light dark;*/
}

/*
 * This is a bit tricky. We want to enable darkmode according to user preference,
 * but we also need a way to be able to force one or the other depending on user choice.
 *
 * For exemple, if user prefers light system-wide, maybe he still want dark mode when reading
 * articles on the blog. To let him choose, we need a way to enforce dark, or enforce light,
 * regardless of system preference.
 *
 * We do this with a 'light' or 'dark' class on the <html> tag that has precedence over
 * the system settings (thus the 'html:not(.light)' or 'html:not(.dark)', because the
 * properties should only be applied when no mode is forced.
 */
@media (prefers-color-scheme: dark) {

	html:not(.light) {

		/* Colors */

		--color-default: white;
		--color-default-transparent: rgba(255, 255, 255, 0.2); /* --color-default */
		--color-default-seethrough: rgba(255, 255, 255, 0.33); /* --color-default */
		--color-default-opaque: rgba(255, 255, 255, 0.7); /* --color-default */

		--color-body: #1e1e1e;
		/*--color-header: transparent;*/
		--color-header-focus: transparent;
		--color-footer: #262626;

		--color-text-dark: var(--color-default);
		--color-text-default: var(--color-default);
		--color-text-light: var(--color-default);
	}

	html:not(.light) .color-scheme-alternates > .dark { display: none; }
	html:not(.light) .color-scheme-alternates > .light { display: unset; }
}

@media (prefers-color-scheme: light) {
	html:not(.dark) .color-scheme-alternates > .dark { display: unset; }
	html:not(.dark) .color-scheme-alternates > .light { display: none; }
}

/*
 * This is stupid but essential to keep it simple.
 *
 * By default, the theme is light, unless <html> has the '.dark' modifier
 * Since CSS doesn't allow conditions, like: if (prefers-color-scheme: dark AND html:not(.light) OR html:is(.dark)),
 * we need to use a workaround. This work around is doing in in two times, duplicating the values.
 *
 * So the one block above is 'user prefers dark' and this one is 'dark is forced'
 * (regardless of system preference).
 */
html.dark {

	/* These values are duplicates of the block above.
	   Needed, as CSS doesn't support conditions. */

	/* Colors */

	--color-default: white;
	--color-default-transparent: rgba(255, 255, 255, 0.2); /* --color-default */
	--color-default-seethrough: rgba(255, 255, 255, 0.33); /* --color-default */
	--color-default-opaque: rgba(255, 255, 255, 0.7); /* --color-default */

	--color-body: #1e1e1e;
	/*--color-header: transparent;*/
	--color-header-focus: transparent;
	--color-footer: #262626;

	--color-text-dark: var(--color-default);
	--color-text-default: var(--color-default);
	--color-text-light: var(--color-default);
}

/*
 * We can't really use the <picture> element (that has the media="prefers dark")
 * because we run in the same problem: no conditions.
 *
 * So the work around to change images is the same, do it twice, one per configuration.
 *
 * Inside the HTML we can set the alternates by specifying a '.dark' or '.light' block
 * inside a '.color-scheme-alternates' parent.
 *
 * Thanks to 'display: none', the hidden version should not be loaded at all.
 */
html.dark .color-scheme-alternates > .dark { display: none; }
html.dark .color-scheme-alternates > .light { display: unset; }

html.light .color-scheme-alternates > .dark { display: unset; }
html.light .color-scheme-alternates > .light { display: none; }
